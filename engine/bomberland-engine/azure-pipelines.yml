pr:
    autoCancel: true
    branches:
        include:
            - master
    paths:
        include:
            - engine
trigger:
    branches:
        include:
            - master
    paths:
        include:
            - engine

resources:
    - repo: self

variables:
    tag: "$(Build.BuildId)"
    serviceName: Bomberland-engine
    servicePath: bomberland-engine
    repository: bomberland-engine
    containerRegistryPublic: coderone-public-acr

stages:
    - stage: CI
      displayName: CI
      jobs:
          - job: CI
            displayName: CI
            pool: Default
            steps:
                - script: |
                      docker build -f $(Build.SourcesDirectory)/engine/$(servicePath)/Dockerfile $(Build.SourcesDirectory)/engine --target build -t $(servicePath) --build-arg ENVIRONMENT=production --build-arg BUILD=$(Build.BuildId)
                      CID=$(docker create $(servicePath))
                      docker cp ${CID}:/app/bomberland-engine/windows.exe $(Build.ArtifactStagingDirectory)/$(servicePath)-$(tag)-windows.exe
                      docker cp ${CID}:/app/bomberland-engine/linux $(Build.ArtifactStagingDirectory)/$(servicePath)-$(tag)-linux
                      docker cp ${CID}:/app/bomberland-engine/osx $(Build.ArtifactStagingDirectory)/$(servicePath)-$(tag)-osx
                      docker rm ${CID}
                  displayName: "Build binaries and copy to cwd"
                - task: "PublishBuildArtifacts@1"
                  inputs:
                      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
                      ArtifactName: "binaries"
                      publishLocation: "Container"
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                - task: Docker@2
                  displayName: Build and test $(serviceName) public
                  inputs:
                      command: build
                      containerRegistry: $(containerRegistryPublic)
                      buildContext: "$(Build.SourcesDirectory)/engine"
                      dockerfile: "$(Build.SourcesDirectory)/engine/$(servicePath)/Dockerfile"
                      repository: $(repository)
                      tags: |
                          $(Build.BuildId)
                          $(tag)
                          latest
                      arguments: "--build-arg ENVIRONMENT=production --build-arg BUILD=$(Build.BuildId)"
                - task: Docker@2
                  displayName: Push $(serviceName) prod
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                  inputs:
                      command: "push"
                      containerRegistry: $(containerRegistryPublic)
                      repository: $(repository)
                      tags: |
                          $(Build.BuildId)
                          $(tag)
                          latest
